
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:FILE_NOTE
/*
 *  DBObject.URL:file:/home/abaza/Projects/BlackHat/src/Database/BlackHat_Database.tbobj
 *
 *   This file is generated by 'Simple DB Object Builder'. It maybe be 
 * regenerated  again in any time. You should not add your code in 
 * this file or you  will lost your code in next time generation.
 *   URL: http://db-obj-builder.sourceforge.net
 *
 *	 Generation Time:2016-03-28 13:45
 *	 Use JDBC Driver:    SQLiteJDBC
 * 
 *	 Generated from:
 *		 URL:   jdbc:sqlite:/home/abaza/Projects/BlackHat/data/db
 * 
 *	 JDBC Information:
 *		 Catalog:null
 * 
 *	 Scheam Information:
 *		 TABLE:  client
 *		 COLUMN: 
 *			 id 	 Object 	 AutoIncrement
 *			 uuid 	 Object 	 
 *			 pc_name 	 Object 	 
 *			 pc_ip_address 	 Object 	 
 *			 pc_local_port 	 Object 	 
 *			 mac 	 Object 	 
 *			 status 	 Object 	 
 *			 last_login 	 Object 	 
 *		 PRIMARY KEY:
 *			 id        Object
 * 
 */
// </editor-fold>//GEN-END:FILE_NOTE

package Database;

// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:IMPORT_SECTION
// IMPORT SECTION START ------------------------------------------------
import java.sql.*;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.HashMap;
import java.lang.reflect.Method;
import java.lang.Object;
// IMPORT SECTION END --------------------------------------------------

// </editor-fold>//GEN-END:IMPORT_SECTION

public class Client {
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:LOAD_JDBC_DRIVER
    // LOAD JDBC DRIVER START ----------------------------------------------
    static{
        try{
            loadJdbcDriver();
        }catch(ClassNotFoundException e){
            String errMsg = getExcpMsg(e);
            throw new RuntimeException(errMsg, e);
        }
    }
    public static void loadJdbcDriver() throws ClassNotFoundException{
        Class.forName("org.sqlite.JDBC");
    }
    private static String getExcpMsg(Exception e){
        return e.getClass().getName()+"(msg:"+e.getMessage()+")";
    }
    // LOAD JDBC DRIVER END ------------------------------------------------
    // </editor-fold>//GEN-END:LOAD_JDBC_DRIVER
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:TABLE_SCHEMA_INFO
    // TABLE SCHEMA INFORMATION START --------------------------------------
    // column fields
    public static final String FLD_ID = "id" ; 
    public static final String FLD_UUID = "uuid" ; 
    public static final String FLD_PC_NAME = "pc_name" ; 
    public static final String FLD_PC_IP_ADDRESS = "pc_ip_address" ; 
    public static final String FLD_PC_LOCAL_PORT = "pc_local_port" ; 
    public static final String FLD_MAC = "mac" ; 
    public static final String FLD_STATUS = "status" ; 
    public static final String FLD_LAST_LOGIN = "last_login" ; 
    // column fields
    public static final String FLD_AUTO_INCREMENT = FLD_ID  ; 
    // column names
    private static final String[] colNames = new String[]{
        "id"
        ,"uuid"
        ,"pc_name"
        ,"pc_ip_address"
        ,"pc_local_port"
        ,"mac"
        ,"status"
        ,"last_login"
    };
    // 	 column SQL Types
    private static final int[] colSqlTypes = new int[]{
        Types.INTEGER
        ,Types.VARCHAR
        ,Types.VARCHAR
        ,Types.VARCHAR
        ,Types.NUMERIC
        ,Types.VARCHAR
        ,Types.NUMERIC
        ,Types.VARCHAR
    };
    // 	 column class name
    private static final String[] colClzNames = new String[]{
        "java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
    };
    // 	 load all column classes
    private static final Class[] colClzs = new Class[8];
    static {
        try{
            loadAllColumnClasses();
        }catch(ClassNotFoundException e){
            String errMsg = getExcpMsg(e);
            throw new RuntimeException(errMsg, e);
        }
    }
    public static void loadAllColumnClasses() throws ClassNotFoundException{
        colClzs[0]=Class.forName("java.lang.Object");
        colClzs[1]=Class.forName("java.lang.Object");
        colClzs[2]=Class.forName("java.lang.Object");
        colClzs[3]=Class.forName("java.lang.Object");
        colClzs[4]=Class.forName("java.lang.Object");
        colClzs[5]=Class.forName("java.lang.Object");
        colClzs[6]=Class.forName("java.lang.Object");
        colClzs[7]=Class.forName("java.lang.Object");
    }
    // 	 all columns string
    public static final String ALL_COL_STR="id,uuid,pc_name,pc_ip_address,pc_local_port,mac,status,last_login";
    // 	 variable definition for table columns
    public final ArrayList nullAL =new ArrayList();
    private Object id ;
    private Object uuid ;
    private Object pc_name ;
    private Object pc_ip_address ;
    private Object pc_local_port ;
    private Object mac ;
    private Object status ;
    private Object last_login ;
    // 	 variable definition for dirty check
    private boolean isDirty = true;
    // 	 variable definition for user object
    private Object usrObj = null;
    // TABLE SCHEMA INFORMATION END ----------------------------------------
    // </editor-fold>//GEN-END:TABLE_SCHEMA_INFO
    
    public Client(){}
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:SCHEMA_METHOD_SECTION
    // SCEHMA METHODS START ------------------------------------------------
    public static int getColCount(){ return 8; }
    public static String getColName(int colIdx){
        if( colIdx>=0 && colIdx<8 ) return colNames[colIdx];
        else return null;
    }
    public static int getColIdx(String colName){
        if(colName==null) return -1;
        for(int i=0;i<8;i++){
            if(colName.equals(colNames[i])) return i;
        }
        return -1;
    }
    public static Class getColClass(int colIdx){
        if( colIdx>=0 && colIdx<8 ) return colClzs[colIdx];
        else return null;
    }
    public static int getColSqlType(int colIdx){
        if( colIdx>=0 && colIdx<8 ) return colSqlTypes[colIdx];
        else return -1;
    }
    public static String getColClzName(int colIdx){
        if( colIdx>=0 && colIdx<8 ) return colClzNames[colIdx];
        else return null;
    }
    // SCEHMA METHODS END --------------------------------------------------
    // </editor-fold>//GEN-END:SCHEMA_METHOD_SECTION
    
    //ATTRIBUTES  START ------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:ATTR_ACCESS_SECTION
    // 	 attributes setter and getter for all table columns 
    // 		 table column: id,	 type: Object
    public void setId(Object id){
        if(id==null && !nullAL.contains("id")){
            nullAL.add("id");
        }else if(id!=null && nullAL.contains("id")){
            nullAL.remove("id");
        }
        boolean changed = false;
        if (this.id == null) {
            if (id != null) {
                changed = true;
            }
        } else if (!this.id.equals(id)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.id=id;
        }
    }
    public Client doSetId(Object id){
        setId(id);
        return this;
    }
    public Object getId(){
        return id;
    }
    // 		 table column: uuid,	 type: Object
    public void setUuid(Object uuid){
        if(uuid==null && !nullAL.contains("uuid")){
            nullAL.add("uuid");
        }else if(uuid!=null && nullAL.contains("uuid")){
            nullAL.remove("uuid");
        }
        boolean changed = false;
        if (this.uuid == null) {
            if (uuid != null) {
                changed = true;
            }
        } else if (!this.uuid.equals(uuid)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.uuid=uuid;
        }
    }
    public Client doSetUuid(Object uuid){
        setUuid(uuid);
        return this;
    }
    public Object getUuid(){
        return uuid;
    }
    // 		 table column: pc_name,	 type: Object
    public void setPc_name(Object pc_name){
        if(pc_name==null && !nullAL.contains("pc_name")){
            nullAL.add("pc_name");
        }else if(pc_name!=null && nullAL.contains("pc_name")){
            nullAL.remove("pc_name");
        }
        boolean changed = false;
        if (this.pc_name == null) {
            if (pc_name != null) {
                changed = true;
            }
        } else if (!this.pc_name.equals(pc_name)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.pc_name=pc_name;
        }
    }
    public Client doSetPc_name(Object pc_name){
        setPc_name(pc_name);
        return this;
    }
    public Object getPc_name(){
        return pc_name;
    }
    // 		 table column: pc_ip_address,	 type: Object
    public void setPc_ip_address(Object pc_ip_address){
        if(pc_ip_address==null && !nullAL.contains("pc_ip_address")){
            nullAL.add("pc_ip_address");
        }else if(pc_ip_address!=null && nullAL.contains("pc_ip_address")){
            nullAL.remove("pc_ip_address");
        }
        boolean changed = false;
        if (this.pc_ip_address == null) {
            if (pc_ip_address != null) {
                changed = true;
            }
        } else if (!this.pc_ip_address.equals(pc_ip_address)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.pc_ip_address=pc_ip_address;
        }
    }
    public Client doSetPc_ip_address(Object pc_ip_address){
        setPc_ip_address(pc_ip_address);
        return this;
    }
    public Object getPc_ip_address(){
        return pc_ip_address;
    }
    // 		 table column: pc_local_port,	 type: Object
    public void setPc_local_port(Object pc_local_port){
        if(pc_local_port==null && !nullAL.contains("pc_local_port")){
            nullAL.add("pc_local_port");
        }else if(pc_local_port!=null && nullAL.contains("pc_local_port")){
            nullAL.remove("pc_local_port");
        }
        boolean changed = false;
        if (this.pc_local_port == null) {
            if (pc_local_port != null) {
                changed = true;
            }
        } else if (!this.pc_local_port.equals(pc_local_port)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.pc_local_port=pc_local_port;
        }
    }
    public Client doSetPc_local_port(Object pc_local_port){
        setPc_local_port(pc_local_port);
        return this;
    }
    public Object getPc_local_port(){
        return pc_local_port;
    }
    // 		 table column: mac,	 type: Object
    public void setMac(Object mac){
        if(mac==null && !nullAL.contains("mac")){
            nullAL.add("mac");
        }else if(mac!=null && nullAL.contains("mac")){
            nullAL.remove("mac");
        }
        boolean changed = false;
        if (this.mac == null) {
            if (mac != null) {
                changed = true;
            }
        } else if (!this.mac.equals(mac)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.mac=mac;
        }
    }
    public Client doSetMac(Object mac){
        setMac(mac);
        return this;
    }
    public Object getMac(){
        return mac;
    }
    // 		 table column: status,	 type: Object
    public void setStatus(Object status){
        if(status==null && !nullAL.contains("status")){
            nullAL.add("status");
        }else if(status!=null && nullAL.contains("status")){
            nullAL.remove("status");
        }
        boolean changed = false;
        if (this.status == null) {
            if (status != null) {
                changed = true;
            }
        } else if (!this.status.equals(status)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.status=status;
        }
    }
    public Client doSetStatus(Object status){
        setStatus(status);
        return this;
    }
    public Object getStatus(){
        return status;
    }
    // 		 table column: last_login,	 type: Object
    public void setLast_login(Object last_login){
        if(last_login==null && !nullAL.contains("last_login")){
            nullAL.add("last_login");
        }else if(last_login!=null && nullAL.contains("last_login")){
            nullAL.remove("last_login");
        }
        boolean changed = false;
        if (this.last_login == null) {
            if (last_login != null) {
                changed = true;
            }
        } else if (!this.last_login.equals(last_login)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.last_login=last_login;
        }
    }
    public Client doSetLast_login(Object last_login){
        setLast_login(last_login);
        return this;
    }
    public Object getLast_login(){
        return last_login;
    }
    // </editor-fold>//GEN-END:ATTR_ACCESS_SECTION
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:ATTR_ACCESS_SECTION2
    public void clearAllAttributes(){
        id = null;
        uuid = null;
        pc_name = null;
        pc_ip_address = null;
        pc_local_port = null;
        mac = null;
        status = null;
        last_login = null;
    }
    public void resetAttributes(Client client){
        id = client.getId();
        uuid = client.getUuid();
        pc_name = client.getPc_name();
        pc_ip_address = client.getPc_ip_address();
        pc_local_port = client.getPc_local_port();
        mac = client.getMac();
        status = client.getStatus();
        last_login = client.getLast_login();
    }
    private void setAttributes(ResultSet rs)throws SQLException{
        ResultSetMetaData rsmd = rs.getMetaData();
        int colCnt = rsmd.getColumnCount();
        for(int idx=0;idx<colCnt;idx++){
            String colName  = rsmd.getColumnName(idx+1);
            String colClzNm = getColClzName(idx);
            Object colValue = null;
            if("java.sql.Timestamp".equals(colClzNm)){
                colValue = rs.getTimestamp(idx+1);
            }else{
                colValue = rs.getObject(idx+1);
            }
            setAttribute(colName,colValue);
        }
    }
    private void setAttribute(String colName,Object colValue){
        if("id".equals(colName)){
            this.setId((Object)colValue);
        }else if("uuid".equals(colName)){
            this.setUuid((Object)colValue);
        }else if("pc_name".equals(colName)){
            this.setPc_name((Object)colValue);
        }else if("pc_ip_address".equals(colName)){
            this.setPc_ip_address((Object)colValue);
        }else if("pc_local_port".equals(colName)){
            this.setPc_local_port((Object)colValue);
        }else if("mac".equals(colName)){
            this.setMac((Object)colValue);
        }else if("status".equals(colName)){
            this.setStatus((Object)colValue);
        }else if("last_login".equals(colName)){
            this.setLast_login((Object)colValue);
        }
    }
    public void setColValue(int colIdx,Object colValue){
        String colName = getColName(colIdx);
        setAttribute(colName,colValue);
    }
    public Object getColValue(int colIdx){
        String colName = getColName(colIdx);
        return getColValue(colName);
    }
    public Object getColValue(String colName){
        if("id".equals(colName)){
            return this.getId();
        }else if("uuid".equals(colName)){
            return this.getUuid();
        }else if("pc_name".equals(colName)){
            return this.getPc_name();
        }else if("pc_ip_address".equals(colName)){
            return this.getPc_ip_address();
        }else if("pc_local_port".equals(colName)){
            return this.getPc_local_port();
        }else if("mac".equals(colName)){
            return this.getMac();
        }else if("status".equals(colName)){
            return this.getStatus();
        }else if("last_login".equals(colName)){
            return this.getLast_login();
        }
        return null;
    }
    // </editor-fold>//GEN-END:ATTR_ACCESS_SECTION2
    
    // ATTRIBUTES END ------------------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:EQU_STR_SECTION
    public String toString(){
        String tmpSql="";
        tmpSql+="id="+id+",";
        tmpSql+="uuid="+uuid+",";
        tmpSql+="pc_name="+pc_name+",";
        tmpSql+="pc_ip_address="+pc_ip_address+",";
        tmpSql+="pc_local_port="+pc_local_port+",";
        tmpSql+="mac="+mac+",";
        tmpSql+="status="+status+",";
        tmpSql+="last_login="+last_login+",";
        return tmpSql;
    }
    public boolean equals(Object obj){
        if(!(obj instanceof Client)) return false;
        Client anObj = (Client)obj ;
        if(id==null){
            if(anObj.getId()!=null){
                return false;
            }
        }else if(!id.equals(anObj.getId())){
            return false;
        }
        if(uuid==null){
            if(anObj.getUuid()!=null){
                return false;
            }
        }else if(!uuid.equals(anObj.getUuid())){
            return false;
        }
        if(pc_name==null){
            if(anObj.getPc_name()!=null){
                return false;
            }
        }else if(!pc_name.equals(anObj.getPc_name())){
            return false;
        }
        if(pc_ip_address==null){
            if(anObj.getPc_ip_address()!=null){
                return false;
            }
        }else if(!pc_ip_address.equals(anObj.getPc_ip_address())){
            return false;
        }
        if(pc_local_port==null){
            if(anObj.getPc_local_port()!=null){
                return false;
            }
        }else if(!pc_local_port.equals(anObj.getPc_local_port())){
            return false;
        }
        if(mac==null){
            if(anObj.getMac()!=null){
                return false;
            }
        }else if(!mac.equals(anObj.getMac())){
            return false;
        }
        if(status==null){
            if(anObj.getStatus()!=null){
                return false;
            }
        }else if(!status.equals(anObj.getStatus())){
            return false;
        }
        if(last_login==null){
            if(anObj.getLast_login()!=null){
                return false;
            }
        }else if(!last_login.equals(anObj.getLast_login())){
            return false;
        }
        return true;
    }
    // </editor-fold>//GEN-END:EQU_STR_SECTION
    
    // SQL QUERY METHODS START ---------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:GENERAL_QUERY
    // total arg: colStr, maxRows, pStmtParamAL
    // skip colStr, maxRows, pStmtParamAL
    public static Client queryFirstRow(Connection conn,String whereStr) throws SQLException{
        Client[] rows = queryDB(conn,ALL_COL_STR,whereStr,null, 1);
        if(rows==null || rows.length == 0) return null;
        return rows[0];
    }
    public static Client[] queryDB(Connection conn,String whereStr) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,null, -1);
    }
    // skip colStr, maxRows
    public static Client queryFirstRow(Connection conn,String whereStr,ArrayList pStmtParamAL) throws SQLException{
        Client[] rows = queryDB(conn,ALL_COL_STR,whereStr,pStmtParamAL, 1);
        if(rows==null || rows.length == 0) return null;
        return rows[0];
    }
    public static Client[] queryDB(Connection conn,String whereStr,ArrayList pStmtParamAL) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,pStmtParamAL, -1);
    }
    // skip colStr, pStmtParamAL
    public static Client[] queryDB(Connection conn,String whereStr, int maxRows) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,null, maxRows);
    }
    // skip colStr
    public static Client[] queryDB(Connection conn,String whereStr,ArrayList pStmtParamAL , int maxRows) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr, pStmtParamAL, maxRows);
    }
    // skip maxRows
    public static Client[] queryDB(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL) throws SQLException{
        return queryDB(conn,colStr, whereStr,pStmtParamAL,-1);
    }
    public static Client[] queryDB(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL, int maxRows) throws SQLException{
        ResultSet rs = null;
        try{
            rs = queryResultSet(conn, colStr, whereStr,pStmtParamAL);
            ArrayList tmpAL=new ArrayList();
            while(rs.next()){
                Client obj=new Client();
                obj.setAttributes(rs);
                tmpAL.add(obj);
                if(maxRows>0 && tmpAL.size()>= maxRows) break;
            }
            Client[] objs=new Client[tmpAL.size()];
            tmpAL.toArray(objs);
            return objs;
        }finally{
            releaseResultSet(rs);
        }
    }
    public static ResultSet queryResultSet(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL) throws SQLException{
        String sqlStr="SELECT "+colStr+" FROM client "+whereStr;
        PreparedStatement pStmt = conn.prepareStatement(sqlStr);
        if(pStmtParamAL!=null){
            for(int idx=0;idx<pStmtParamAL.size();idx++){
                Object param = pStmtParamAL.get(idx);
                pStmt.setObject(idx+1,param);//test
            }
        }
        return pStmt.executeQuery();
    }
    public static void releaseResultSet(ResultSet rs) throws SQLException{
        if(rs!=null){
            Statement stmt = rs.getStatement();
            try{rs.close();}catch(Exception e){System.out.println("e:"+e);}
            try{stmt.close();}catch(Exception e){System.out.println("e:"+e);}
        }
    }
    // </editor-fold>//GEN-END:GENERAL_QUERY
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:PRIMARY_KEY_QUERY
    public static Client queryByPK(Connection conn, Object id) throws SQLException {
        return queryByPK(conn, ALL_COL_STR, id);
    }
    public static Client queryByPK(Connection conn, String colStr, Object id) throws SQLException {
        String sqlStr="SELECT "+colStr+" FROM client WHERE id = ? ";
        Client ans = null;
        PreparedStatement pStmt = null;
        ResultSet rs = null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            pStmt.setObject(1,id);
            rs = pStmt.executeQuery();
            if(rs.next()){
                ans = new Client();
                ans.setAttributes(rs);
            }
        }finally{
            if(rs!=null) rs.close();
            if(pStmt!=null) pStmt.close();
        }
        return ans;
    }
    // </editor-fold>//GEN-END:PRIMARY_KEY_QUERY
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:FOREIGN_KEY_QUERY
    // </editor-fold>//GEN-END:FOREIGN_KEY_QUERY
    
    // SQL QUERY METHODS END -----------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:INSERT_DELETE_UPDATE_METHOD
    // SQL MODIFICATION METHODS START --------------------------------------
    public boolean insertIntoDB(Connection conn) throws SQLException {
        String sqlStr="INSERT INTO client (";
        boolean ifFirst=true;
        int valColCnt=0;
        for(int i=0;i<colNames.length;i++){
            String colName = colNames[i];
            if(this.getColValue(colName)!=null || nullAL.contains(colName)){
                if(ifFirst){ifFirst=false; }else{sqlStr+=",";}
                valColCnt++;
                sqlStr+=colName;
            }
        }
        sqlStr+=") values (";
        for(int i=0;i<valColCnt;i++){
            if(i!=0) sqlStr+=",";
            sqlStr+=" ? ";
        }
        sqlStr+=")";
        PreparedStatement pStmt=null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            valColCnt=0;
            ifFirst=true;
            for(int i=0;i<colNames.length;i++){
                String colName = colNames[i];
                if(this.getColValue(colName)!=null || nullAL.contains(colName)){
                    valColCnt++;
                    if(!nullAL.contains(colName)){
                        pStmt.setObject(valColCnt,getColValue(colName));
                    }else{// user set it null
                        int colIdx = getColIdx(colName);
                        pStmt.setNull(valColCnt,getColSqlType(colIdx));
                    }
                }
            }
            pStmt.execute();
        }finally{
            try{pStmt.close();}catch(Exception e){}
        }
        this.isDirty=false;
        return true;
    }
    public boolean deleteFromDB(Connection conn) throws SQLException {
        if(id==null){return false;}
        String sqlStr="DELETE FROM client WHERE id=? ";
        PreparedStatement pStmt=conn.prepareStatement(sqlStr);
        pStmt.setObject(1,id);
        pStmt.execute();
        pStmt.close();
        this.isDirty=false;
        return true;
    }
    // update method
    public boolean updateDB(Connection conn) throws SQLException {
        return updateDB(conn ,"id","uuid","pc_name","pc_ip_address","pc_local_port","mac","status","last_login");
    }
    public boolean updateDB(Connection conn,String... colStrs) throws SQLException {
        if(id==null){return false;}
        String sqlStr = getUpdateSQL(colStrs);
        String[] updColNames=getUpdColNames(colStrs);
        PreparedStatement pStmt=null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            for(int i=0;i<updColNames.length;i++){
                Object obj = getColValue(updColNames[i]);
                if(obj!=null) pStmt.setObject(i+1,obj);
                else pStmt.setNull(i+1, getColSqlType(getColIdx(updColNames[i])));
            }
            pStmt.setObject(updColNames.length+1,id);
            pStmt.execute();
        }finally{
            try{pStmt.close();}catch(Exception ex){}
        }
        this.isDirty=false;
        return true;
    }
    public String getUpdateSQL(String... colStrs){
        String[] updColNames=getUpdColNames(colStrs);
        String sqlStr="UPDATE client SET ";
        for(int i=0;i<updColNames.length;i++){
            if(i!=0) sqlStr+=", ";
            sqlStr+=updColNames[i]+"=?";
        }
        sqlStr+=" WHERE id = ? ";
        return sqlStr;
    }
    private String[] getUpdColNames(String... colStrs){
        ArrayList tmpAL=new ArrayList();
        for (String colStr : colStrs) {
            if (colStr == null) continue;
            colStr=colStr.trim();
            if("".equals(colStr)) continue;
            else if("id".equalsIgnoreCase(colStr))continue;
            if(this.getColValue(colStr)==null && !this.nullAL.contains(colStr)) continue;
            tmpAL.add(colStr);
        }
        String[] ans=new String[tmpAL.size()];
        tmpAL.toArray(ans);
        return ans;
    }
    // SQL MODIFICATION METHODS END ----------------------------------------
    // </editor-fold>//GEN-END:INSERT_DELETE_UPDATE_METHOD
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:OTHER_ISSUES_METHOD
    public boolean isDirty(){
        return isDirty;
    }
    public void clearDirtyFlag(){
        this.isDirty=false;
    }
    public Object getUsrObj(){
        return usrObj;
    }
    public void setUsrObj(Object usrObj){
        this.usrObj = usrObj;
    }
    // </editor-fold>//GEN-END:OTHER_ISSUES_METHOD
}
