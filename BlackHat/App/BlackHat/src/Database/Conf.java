
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:FILE_NOTE
/*
 *  DBObject.URL:file:/home/abaza/NetBeansProjects/Network/BlackHat/src/Database/BlackHat_Database.tbobj
 *
 *   This file is generated by 'Simple DB Object Builder'. It maybe be 
 * regenerated  again in any time. You should not add your code in 
 * this file or you  will lost your code in next time generation.
 *   URL: http://db-obj-builder.sourceforge.net
 *
 *	 Generation Time:2016-03-07 20:35
 *	 Use JDBC Driver:    SQLiteJDBC
 * 
 *	 Generated from:
 *		 URL:   jdbc:sqlite:/home/abaza/NetBeansProjects/Network/BlackHat/data/db
 * 
 *	 JDBC Information:
 *		 Catalog:null
 * 
 *	 Scheam Information:
 *		 TABLE:  conf
 *		 COLUMN: 
 *			 download_dir 	 Object 	 
 *			 encpass 	 Object 	 
 *			 opencloseencript 	 Object 	 
 *			 downloadname 	 Object 	 
 *			 delaftercopyinusb 	 Object 	 
 *			 delinthisday 	 Object 	 
 *			 action_whin_motion_stop 	 Object 	 
 *			 start_action_after_delay 	 Object 	 
 *			 open_every 	 Object 	 
 *			 time_not_open 	 Object 	 
 *			 date_for_action 	 Object 	 
 *			 ifidaid 	 Object 	 
 *			 action_for_action 	 Object 	 
 *		 PRIMARY KEY:
 * 
 */
// </editor-fold>//GEN-END:FILE_NOTE

package Database;

// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:IMPORT_SECTION
// IMPORT SECTION START ------------------------------------------------
import java.sql.*;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.HashMap;
import java.lang.reflect.Method;
import java.lang.Object;
// IMPORT SECTION END --------------------------------------------------

// </editor-fold>//GEN-END:IMPORT_SECTION

public class Conf {
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:LOAD_JDBC_DRIVER
    // LOAD JDBC DRIVER START ----------------------------------------------
    static{
        try{
            loadJdbcDriver();
        }catch(ClassNotFoundException e){
            String errMsg = getExcpMsg(e);
            throw new RuntimeException(errMsg, e);
        }
    }
    public static void loadJdbcDriver() throws ClassNotFoundException{
        Class.forName("org.sqlite.JDBC");
    }
    private static String getExcpMsg(Exception e){
        return e.getClass().getName()+"(msg:"+e.getMessage()+")";
    }
    // LOAD JDBC DRIVER END ------------------------------------------------
    // </editor-fold>//GEN-END:LOAD_JDBC_DRIVER
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:TABLE_SCHEMA_INFO
    // TABLE SCHEMA INFORMATION START --------------------------------------
    // column fields
    public static final String FLD_DOWNLOAD_DIR = "download_dir" ; 
    public static final String FLD_ENCPASS = "encpass" ; 
    public static final String FLD_OPENCLOSEENCRIPT = "opencloseencript" ; 
    public static final String FLD_DOWNLOADNAME = "downloadname" ; 
    public static final String FLD_DELAFTERCOPYINUSB = "delaftercopyinusb" ; 
    public static final String FLD_DELINTHISDAY = "delinthisday" ; 
    public static final String FLD_ACTION_WHIN_MOTION_STOP = "action_whin_motion_stop" ; 
    public static final String FLD_START_ACTION_AFTER_DELAY = "start_action_after_delay" ; 
    public static final String FLD_OPEN_EVERY = "open_every" ; 
    public static final String FLD_TIME_NOT_OPEN = "time_not_open" ; 
    public static final String FLD_DATE_FOR_ACTION = "date_for_action" ; 
    public static final String FLD_IFIDAID = "ifidaid" ; 
    public static final String FLD_ACTION_FOR_ACTION = "action_for_action" ; 
    // column fields
    public static final String FLD_AUTO_INCREMENT = null  ; 
    // column names
    private static final String[] colNames = new String[]{
        "download_dir"
        ,"encpass"
        ,"opencloseencript"
        ,"downloadname"
        ,"delaftercopyinusb"
        ,"delinthisday"
        ,"action_whin_motion_stop"
        ,"start_action_after_delay"
        ,"open_every"
        ,"time_not_open"
        ,"date_for_action"
        ,"ifidaid"
        ,"action_for_action"
    };
    // 	 column SQL Types
    private static final int[] colSqlTypes = new int[]{
        Types.VARCHAR
        ,Types.VARCHAR
        ,Types.INTEGER
        ,Types.INTEGER
        ,Types.INTEGER
        ,Types.INTEGER
        ,Types.INTEGER
        ,Types.INTEGER
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.INTEGER
        ,Types.NULL
    };
    // 	 column class name
    private static final String[] colClzNames = new String[]{
        "java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
    };
    // 	 load all column classes
    private static final Class[] colClzs = new Class[13];
    static {
        try{
            loadAllColumnClasses();
        }catch(ClassNotFoundException e){
            String errMsg = getExcpMsg(e);
            throw new RuntimeException(errMsg, e);
        }
    }
    public static void loadAllColumnClasses() throws ClassNotFoundException{
        colClzs[0]=Class.forName("java.lang.Object");
        colClzs[1]=Class.forName("java.lang.Object");
        colClzs[2]=Class.forName("java.lang.Object");
        colClzs[3]=Class.forName("java.lang.Object");
        colClzs[4]=Class.forName("java.lang.Object");
        colClzs[5]=Class.forName("java.lang.Object");
        colClzs[6]=Class.forName("java.lang.Object");
        colClzs[7]=Class.forName("java.lang.Object");
        colClzs[8]=Class.forName("java.lang.Object");
        colClzs[9]=Class.forName("java.lang.Object");
        colClzs[10]=Class.forName("java.lang.Object");
        colClzs[11]=Class.forName("java.lang.Object");
        colClzs[12]=Class.forName("java.lang.Object");
    }
    // 	 all columns string
    public static final String ALL_COL_STR="download_dir,encpass,opencloseencript,downloadname,delaftercopyinusb,delinthisday,action_whin_motion_stop,start_action_after_delay,open_every,time_not_open,date_for_action,ifidaid,action_for_action";
    // 	 variable definition for table columns
    public final ArrayList nullAL =new ArrayList();
    private Object download_dir ;
    private Object encpass ;
    private Object opencloseencript ;
    private Object downloadname ;
    private Object delaftercopyinusb ;
    private Object delinthisday ;
    private Object action_whin_motion_stop ;
    private Object start_action_after_delay ;
    private Object open_every ;
    private Object time_not_open ;
    private Object date_for_action ;
    private Object ifidaid ;
    private Object action_for_action ;
    // 	 variable definition for dirty check
    private boolean isDirty = true;
    // 	 variable definition for user object
    private Object usrObj = null;
    // TABLE SCHEMA INFORMATION END ----------------------------------------
    // </editor-fold>//GEN-END:TABLE_SCHEMA_INFO
    
    public Conf(){}
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:SCHEMA_METHOD_SECTION
    // SCEHMA METHODS START ------------------------------------------------
    public static int getColCount(){ return 13; }
    public static String getColName(int colIdx){
        if( colIdx>=0 && colIdx<13 ) return colNames[colIdx];
        else return null;
    }
    public static int getColIdx(String colName){
        if(colName==null) return -1;
        for(int i=0;i<13;i++){
            if(colName.equals(colNames[i])) return i;
        }
        return -1;
    }
    public static Class getColClass(int colIdx){
        if( colIdx>=0 && colIdx<13 ) return colClzs[colIdx];
        else return null;
    }
    public static int getColSqlType(int colIdx){
        if( colIdx>=0 && colIdx<13 ) return colSqlTypes[colIdx];
        else return -1;
    }
    public static String getColClzName(int colIdx){
        if( colIdx>=0 && colIdx<13 ) return colClzNames[colIdx];
        else return null;
    }
    // SCEHMA METHODS END --------------------------------------------------
    // </editor-fold>//GEN-END:SCHEMA_METHOD_SECTION
    
    //ATTRIBUTES  START ------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:ATTR_ACCESS_SECTION
    // 	 attributes setter and getter for all table columns 
    // 		 table column: download_dir,	 type: Object
    public void setDownload_dir(Object download_dir){
        if(download_dir==null && !nullAL.contains("download_dir")){
            nullAL.add("download_dir");
        }else if(download_dir!=null && nullAL.contains("download_dir")){
            nullAL.remove("download_dir");
        }
        boolean changed = false;
        if (this.download_dir == null) {
            if (download_dir != null) {
                changed = true;
            }
        } else if (!this.download_dir.equals(download_dir)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.download_dir=download_dir;
        }
    }
    public Conf doSetDownload_dir(Object download_dir){
        setDownload_dir(download_dir);
        return this;
    }
    public Object getDownload_dir(){
        return download_dir;
    }
    // 		 table column: encpass,	 type: Object
    public void setEncpass(Object encpass){
        if(encpass==null && !nullAL.contains("encpass")){
            nullAL.add("encpass");
        }else if(encpass!=null && nullAL.contains("encpass")){
            nullAL.remove("encpass");
        }
        boolean changed = false;
        if (this.encpass == null) {
            if (encpass != null) {
                changed = true;
            }
        } else if (!this.encpass.equals(encpass)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.encpass=encpass;
        }
    }
    public Conf doSetEncpass(Object encpass){
        setEncpass(encpass);
        return this;
    }
    public Object getEncpass(){
        return encpass;
    }
    // 		 table column: opencloseencript,	 type: Object
    public void setOpencloseencript(Object opencloseencript){
        if(opencloseencript==null && !nullAL.contains("opencloseencript")){
            nullAL.add("opencloseencript");
        }else if(opencloseencript!=null && nullAL.contains("opencloseencript")){
            nullAL.remove("opencloseencript");
        }
        boolean changed = false;
        if (this.opencloseencript == null) {
            if (opencloseencript != null) {
                changed = true;
            }
        } else if (!this.opencloseencript.equals(opencloseencript)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.opencloseencript=opencloseencript;
        }
    }
    public Conf doSetOpencloseencript(Object opencloseencript){
        setOpencloseencript(opencloseencript);
        return this;
    }
    public Object getOpencloseencript(){
        return opencloseencript;
    }
    // 		 table column: downloadname,	 type: Object
    public void setDownloadname(Object downloadname){
        if(downloadname==null && !nullAL.contains("downloadname")){
            nullAL.add("downloadname");
        }else if(downloadname!=null && nullAL.contains("downloadname")){
            nullAL.remove("downloadname");
        }
        boolean changed = false;
        if (this.downloadname == null) {
            if (downloadname != null) {
                changed = true;
            }
        } else if (!this.downloadname.equals(downloadname)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.downloadname=downloadname;
        }
    }
    public Conf doSetDownloadname(Object downloadname){
        setDownloadname(downloadname);
        return this;
    }
    public Object getDownloadname(){
        return downloadname;
    }
    // 		 table column: delaftercopyinusb,	 type: Object
    public void setDelaftercopyinusb(Object delaftercopyinusb){
        if(delaftercopyinusb==null && !nullAL.contains("delaftercopyinusb")){
            nullAL.add("delaftercopyinusb");
        }else if(delaftercopyinusb!=null && nullAL.contains("delaftercopyinusb")){
            nullAL.remove("delaftercopyinusb");
        }
        boolean changed = false;
        if (this.delaftercopyinusb == null) {
            if (delaftercopyinusb != null) {
                changed = true;
            }
        } else if (!this.delaftercopyinusb.equals(delaftercopyinusb)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.delaftercopyinusb=delaftercopyinusb;
        }
    }
    public Conf doSetDelaftercopyinusb(Object delaftercopyinusb){
        setDelaftercopyinusb(delaftercopyinusb);
        return this;
    }
    public Object getDelaftercopyinusb(){
        return delaftercopyinusb;
    }
    // 		 table column: delinthisday,	 type: Object
    public void setDelinthisday(Object delinthisday){
        if(delinthisday==null && !nullAL.contains("delinthisday")){
            nullAL.add("delinthisday");
        }else if(delinthisday!=null && nullAL.contains("delinthisday")){
            nullAL.remove("delinthisday");
        }
        boolean changed = false;
        if (this.delinthisday == null) {
            if (delinthisday != null) {
                changed = true;
            }
        } else if (!this.delinthisday.equals(delinthisday)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.delinthisday=delinthisday;
        }
    }
    public Conf doSetDelinthisday(Object delinthisday){
        setDelinthisday(delinthisday);
        return this;
    }
    public Object getDelinthisday(){
        return delinthisday;
    }
    // 		 table column: action_whin_motion_stop,	 type: Object
    public void setAction_whin_motion_stop(Object action_whin_motion_stop){
        if(action_whin_motion_stop==null && !nullAL.contains("action_whin_motion_stop")){
            nullAL.add("action_whin_motion_stop");
        }else if(action_whin_motion_stop!=null && nullAL.contains("action_whin_motion_stop")){
            nullAL.remove("action_whin_motion_stop");
        }
        boolean changed = false;
        if (this.action_whin_motion_stop == null) {
            if (action_whin_motion_stop != null) {
                changed = true;
            }
        } else if (!this.action_whin_motion_stop.equals(action_whin_motion_stop)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.action_whin_motion_stop=action_whin_motion_stop;
        }
    }
    public Conf doSetAction_whin_motion_stop(Object action_whin_motion_stop){
        setAction_whin_motion_stop(action_whin_motion_stop);
        return this;
    }
    public Object getAction_whin_motion_stop(){
        return action_whin_motion_stop;
    }
    // 		 table column: start_action_after_delay,	 type: Object
    public void setStart_action_after_delay(Object start_action_after_delay){
        if(start_action_after_delay==null && !nullAL.contains("start_action_after_delay")){
            nullAL.add("start_action_after_delay");
        }else if(start_action_after_delay!=null && nullAL.contains("start_action_after_delay")){
            nullAL.remove("start_action_after_delay");
        }
        boolean changed = false;
        if (this.start_action_after_delay == null) {
            if (start_action_after_delay != null) {
                changed = true;
            }
        } else if (!this.start_action_after_delay.equals(start_action_after_delay)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.start_action_after_delay=start_action_after_delay;
        }
    }
    public Conf doSetStart_action_after_delay(Object start_action_after_delay){
        setStart_action_after_delay(start_action_after_delay);
        return this;
    }
    public Object getStart_action_after_delay(){
        return start_action_after_delay;
    }
    // 		 table column: open_every,	 type: Object
    public void setOpen_every(Object open_every){
        if(open_every==null && !nullAL.contains("open_every")){
            nullAL.add("open_every");
        }else if(open_every!=null && nullAL.contains("open_every")){
            nullAL.remove("open_every");
        }
        boolean changed = false;
        if (this.open_every == null) {
            if (open_every != null) {
                changed = true;
            }
        } else if (!this.open_every.equals(open_every)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.open_every=open_every;
        }
    }
    public Conf doSetOpen_every(Object open_every){
        setOpen_every(open_every);
        return this;
    }
    public Object getOpen_every(){
        return open_every;
    }
    // 		 table column: time_not_open,	 type: Object
    public void setTime_not_open(Object time_not_open){
        if(time_not_open==null && !nullAL.contains("time_not_open")){
            nullAL.add("time_not_open");
        }else if(time_not_open!=null && nullAL.contains("time_not_open")){
            nullAL.remove("time_not_open");
        }
        boolean changed = false;
        if (this.time_not_open == null) {
            if (time_not_open != null) {
                changed = true;
            }
        } else if (!this.time_not_open.equals(time_not_open)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.time_not_open=time_not_open;
        }
    }
    public Conf doSetTime_not_open(Object time_not_open){
        setTime_not_open(time_not_open);
        return this;
    }
    public Object getTime_not_open(){
        return time_not_open;
    }
    // 		 table column: date_for_action,	 type: Object
    public void setDate_for_action(Object date_for_action){
        if(date_for_action==null && !nullAL.contains("date_for_action")){
            nullAL.add("date_for_action");
        }else if(date_for_action!=null && nullAL.contains("date_for_action")){
            nullAL.remove("date_for_action");
        }
        boolean changed = false;
        if (this.date_for_action == null) {
            if (date_for_action != null) {
                changed = true;
            }
        } else if (!this.date_for_action.equals(date_for_action)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.date_for_action=date_for_action;
        }
    }
    public Conf doSetDate_for_action(Object date_for_action){
        setDate_for_action(date_for_action);
        return this;
    }
    public Object getDate_for_action(){
        return date_for_action;
    }
    // 		 table column: ifidaid,	 type: Object
    public void setIfidaid(Object ifidaid){
        if(ifidaid==null && !nullAL.contains("ifidaid")){
            nullAL.add("ifidaid");
        }else if(ifidaid!=null && nullAL.contains("ifidaid")){
            nullAL.remove("ifidaid");
        }
        boolean changed = false;
        if (this.ifidaid == null) {
            if (ifidaid != null) {
                changed = true;
            }
        } else if (!this.ifidaid.equals(ifidaid)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.ifidaid=ifidaid;
        }
    }
    public Conf doSetIfidaid(Object ifidaid){
        setIfidaid(ifidaid);
        return this;
    }
    public Object getIfidaid(){
        return ifidaid;
    }
    // 		 table column: action_for_action,	 type: Object
    public void setAction_for_action(Object action_for_action){
        if(action_for_action==null && !nullAL.contains("action_for_action")){
            nullAL.add("action_for_action");
        }else if(action_for_action!=null && nullAL.contains("action_for_action")){
            nullAL.remove("action_for_action");
        }
        boolean changed = false;
        if (this.action_for_action == null) {
            if (action_for_action != null) {
                changed = true;
            }
        } else if (!this.action_for_action.equals(action_for_action)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.action_for_action=action_for_action;
        }
    }
    public Conf doSetAction_for_action(Object action_for_action){
        setAction_for_action(action_for_action);
        return this;
    }
    public Object getAction_for_action(){
        return action_for_action;
    }
    // </editor-fold>//GEN-END:ATTR_ACCESS_SECTION
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:ATTR_ACCESS_SECTION2
    public void clearAllAttributes(){
        download_dir = null;
        encpass = null;
        opencloseencript = null;
        downloadname = null;
        delaftercopyinusb = null;
        delinthisday = null;
        action_whin_motion_stop = null;
        start_action_after_delay = null;
        open_every = null;
        time_not_open = null;
        date_for_action = null;
        ifidaid = null;
        action_for_action = null;
    }
    public void resetAttributes(Conf conf){
        download_dir = conf.getDownload_dir();
        encpass = conf.getEncpass();
        opencloseencript = conf.getOpencloseencript();
        downloadname = conf.getDownloadname();
        delaftercopyinusb = conf.getDelaftercopyinusb();
        delinthisday = conf.getDelinthisday();
        action_whin_motion_stop = conf.getAction_whin_motion_stop();
        start_action_after_delay = conf.getStart_action_after_delay();
        open_every = conf.getOpen_every();
        time_not_open = conf.getTime_not_open();
        date_for_action = conf.getDate_for_action();
        ifidaid = conf.getIfidaid();
        action_for_action = conf.getAction_for_action();
    }
    private void setAttributes(ResultSet rs)throws SQLException{
        ResultSetMetaData rsmd = rs.getMetaData();
        int colCnt = rsmd.getColumnCount();
        for(int idx=0;idx<colCnt;idx++){
            String colName  = rsmd.getColumnName(idx+1);
            String colClzNm = getColClzName(idx);
            Object colValue = null;
            if("java.sql.Timestamp".equals(colClzNm)){
                colValue = rs.getTimestamp(idx+1);
            }else{
                colValue = rs.getObject(idx+1);
            }
            setAttribute(colName,colValue);
        }
    }
    private void setAttribute(String colName,Object colValue){
        if("download_dir".equals(colName)){
            this.setDownload_dir((Object)colValue);
        }else if("encpass".equals(colName)){
            this.setEncpass((Object)colValue);
        }else if("opencloseencript".equals(colName)){
            this.setOpencloseencript((Object)colValue);
        }else if("downloadname".equals(colName)){
            this.setDownloadname((Object)colValue);
        }else if("delaftercopyinusb".equals(colName)){
            this.setDelaftercopyinusb((Object)colValue);
        }else if("delinthisday".equals(colName)){
            this.setDelinthisday((Object)colValue);
        }else if("action_whin_motion_stop".equals(colName)){
            this.setAction_whin_motion_stop((Object)colValue);
        }else if("start_action_after_delay".equals(colName)){
            this.setStart_action_after_delay((Object)colValue);
        }else if("open_every".equals(colName)){
            this.setOpen_every((Object)colValue);
        }else if("time_not_open".equals(colName)){
            this.setTime_not_open((Object)colValue);
        }else if("date_for_action".equals(colName)){
            this.setDate_for_action((Object)colValue);
        }else if("ifidaid".equals(colName)){
            this.setIfidaid((Object)colValue);
        }else if("action_for_action".equals(colName)){
            this.setAction_for_action((Object)colValue);
        }
    }
    public void setColValue(int colIdx,Object colValue){
        String colName = getColName(colIdx);
        setAttribute(colName,colValue);
    }
    public Object getColValue(int colIdx){
        String colName = getColName(colIdx);
        return getColValue(colName);
    }
    public Object getColValue(String colName){
        if("download_dir".equals(colName)){
            return this.getDownload_dir();
        }else if("encpass".equals(colName)){
            return this.getEncpass();
        }else if("opencloseencript".equals(colName)){
            return this.getOpencloseencript();
        }else if("downloadname".equals(colName)){
            return this.getDownloadname();
        }else if("delaftercopyinusb".equals(colName)){
            return this.getDelaftercopyinusb();
        }else if("delinthisday".equals(colName)){
            return this.getDelinthisday();
        }else if("action_whin_motion_stop".equals(colName)){
            return this.getAction_whin_motion_stop();
        }else if("start_action_after_delay".equals(colName)){
            return this.getStart_action_after_delay();
        }else if("open_every".equals(colName)){
            return this.getOpen_every();
        }else if("time_not_open".equals(colName)){
            return this.getTime_not_open();
        }else if("date_for_action".equals(colName)){
            return this.getDate_for_action();
        }else if("ifidaid".equals(colName)){
            return this.getIfidaid();
        }else if("action_for_action".equals(colName)){
            return this.getAction_for_action();
        }
        return null;
    }
    // </editor-fold>//GEN-END:ATTR_ACCESS_SECTION2
    
    // ATTRIBUTES END ------------------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:EQU_STR_SECTION
    public String toString(){
        String tmpSql="";
        tmpSql+="download_dir="+download_dir+",";
        tmpSql+="encpass="+encpass+",";
        tmpSql+="opencloseencript="+opencloseencript+",";
        tmpSql+="downloadname="+downloadname+",";
        tmpSql+="delaftercopyinusb="+delaftercopyinusb+",";
        tmpSql+="delinthisday="+delinthisday+",";
        tmpSql+="action_whin_motion_stop="+action_whin_motion_stop+",";
        tmpSql+="start_action_after_delay="+start_action_after_delay+",";
        tmpSql+="open_every="+open_every+",";
        tmpSql+="time_not_open="+time_not_open+",";
        tmpSql+="date_for_action="+date_for_action+",";
        tmpSql+="ifidaid="+ifidaid+",";
        tmpSql+="action_for_action="+action_for_action+",";
        return tmpSql;
    }
    public boolean equals(Object obj){
        if(!(obj instanceof Conf)) return false;
        Conf anObj = (Conf)obj ;
        if(download_dir==null){
            if(anObj.getDownload_dir()!=null){
                return false;
            }
        }else if(!download_dir.equals(anObj.getDownload_dir())){
            return false;
        }
        if(encpass==null){
            if(anObj.getEncpass()!=null){
                return false;
            }
        }else if(!encpass.equals(anObj.getEncpass())){
            return false;
        }
        if(opencloseencript==null){
            if(anObj.getOpencloseencript()!=null){
                return false;
            }
        }else if(!opencloseencript.equals(anObj.getOpencloseencript())){
            return false;
        }
        if(downloadname==null){
            if(anObj.getDownloadname()!=null){
                return false;
            }
        }else if(!downloadname.equals(anObj.getDownloadname())){
            return false;
        }
        if(delaftercopyinusb==null){
            if(anObj.getDelaftercopyinusb()!=null){
                return false;
            }
        }else if(!delaftercopyinusb.equals(anObj.getDelaftercopyinusb())){
            return false;
        }
        if(delinthisday==null){
            if(anObj.getDelinthisday()!=null){
                return false;
            }
        }else if(!delinthisday.equals(anObj.getDelinthisday())){
            return false;
        }
        if(action_whin_motion_stop==null){
            if(anObj.getAction_whin_motion_stop()!=null){
                return false;
            }
        }else if(!action_whin_motion_stop.equals(anObj.getAction_whin_motion_stop())){
            return false;
        }
        if(start_action_after_delay==null){
            if(anObj.getStart_action_after_delay()!=null){
                return false;
            }
        }else if(!start_action_after_delay.equals(anObj.getStart_action_after_delay())){
            return false;
        }
        if(open_every==null){
            if(anObj.getOpen_every()!=null){
                return false;
            }
        }else if(!open_every.equals(anObj.getOpen_every())){
            return false;
        }
        if(time_not_open==null){
            if(anObj.getTime_not_open()!=null){
                return false;
            }
        }else if(!time_not_open.equals(anObj.getTime_not_open())){
            return false;
        }
        if(date_for_action==null){
            if(anObj.getDate_for_action()!=null){
                return false;
            }
        }else if(!date_for_action.equals(anObj.getDate_for_action())){
            return false;
        }
        if(ifidaid==null){
            if(anObj.getIfidaid()!=null){
                return false;
            }
        }else if(!ifidaid.equals(anObj.getIfidaid())){
            return false;
        }
        if(action_for_action==null){
            if(anObj.getAction_for_action()!=null){
                return false;
            }
        }else if(!action_for_action.equals(anObj.getAction_for_action())){
            return false;
        }
        return true;
    }
    // </editor-fold>//GEN-END:EQU_STR_SECTION
    
    // SQL QUERY METHODS START ---------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:GENERAL_QUERY
    // total arg: colStr, maxRows, pStmtParamAL
    // skip colStr, maxRows, pStmtParamAL
    public static Conf queryFirstRow(Connection conn,String whereStr) throws SQLException{
        Conf[] rows = queryDB(conn,ALL_COL_STR,whereStr,null, 1);
        if(rows==null || rows.length == 0) return null;
        return rows[0];
    }
    public static Conf[] queryDB(Connection conn,String whereStr) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,null, -1);
    }
    // skip colStr, maxRows
    public static Conf queryFirstRow(Connection conn,String whereStr,ArrayList pStmtParamAL) throws SQLException{
        Conf[] rows = queryDB(conn,ALL_COL_STR,whereStr,pStmtParamAL, 1);
        if(rows==null || rows.length == 0) return null;
        return rows[0];
    }
    public static Conf[] queryDB(Connection conn,String whereStr,ArrayList pStmtParamAL) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,pStmtParamAL, -1);
    }
    // skip colStr, pStmtParamAL
    public static Conf[] queryDB(Connection conn,String whereStr, int maxRows) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,null, maxRows);
    }
    // skip colStr
    public static Conf[] queryDB(Connection conn,String whereStr,ArrayList pStmtParamAL , int maxRows) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr, pStmtParamAL, maxRows);
    }
    // skip maxRows
    public static Conf[] queryDB(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL) throws SQLException{
        return queryDB(conn,colStr, whereStr,pStmtParamAL,-1);
    }
    public static Conf[] queryDB(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL, int maxRows) throws SQLException{
        ResultSet rs = null;
        try{
            rs = queryResultSet(conn, colStr, whereStr,pStmtParamAL);
            ArrayList tmpAL=new ArrayList();
            while(rs.next()){
                Conf obj=new Conf();
                obj.setAttributes(rs);
                tmpAL.add(obj);
                if(maxRows>0 && tmpAL.size()>= maxRows) break;
            }
            Conf[] objs=new Conf[tmpAL.size()];
            tmpAL.toArray(objs);
            return objs;
        }finally{
            releaseResultSet(rs);
        }
    }
    public static ResultSet queryResultSet(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL) throws SQLException{
        String sqlStr="SELECT "+colStr+" FROM conf "+whereStr;
        PreparedStatement pStmt = conn.prepareStatement(sqlStr);
        if(pStmtParamAL!=null){
            for(int idx=0;idx<pStmtParamAL.size();idx++){
                Object param = pStmtParamAL.get(idx);
                pStmt.setObject(idx+1,param);//test
            }
        }
        return pStmt.executeQuery();
    }
    public static void releaseResultSet(ResultSet rs) throws SQLException{
        if(rs!=null){
            Statement stmt = rs.getStatement();
            try{rs.close();}catch(Exception e){System.out.println("e:"+e);}
            try{stmt.close();}catch(Exception e){System.out.println("e:"+e);}
        }
    }
    // </editor-fold>//GEN-END:GENERAL_QUERY
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:PRIMARY_KEY_QUERY
    // </editor-fold>//GEN-END:PRIMARY_KEY_QUERY
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:FOREIGN_KEY_QUERY
    // </editor-fold>//GEN-END:FOREIGN_KEY_QUERY
    
    // SQL QUERY METHODS END -----------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:INSERT_DELETE_UPDATE_METHOD
    // SQL MODIFICATION METHODS START --------------------------------------
    public boolean insertIntoDB(Connection conn) throws SQLException {
        String sqlStr="INSERT INTO conf (";
        boolean ifFirst=true;
        int valColCnt=0;
        for(int i=0;i<colNames.length;i++){
            String colName = colNames[i];
            if(this.getColValue(colName)!=null || nullAL.contains(colName)){
                if(ifFirst){ifFirst=false; }else{sqlStr+=",";}
                valColCnt++;
                sqlStr+=colName;
            }
        }
        sqlStr+=") values (";
        for(int i=0;i<valColCnt;i++){
            if(i!=0) sqlStr+=",";
            sqlStr+=" ? ";
        }
        sqlStr+=")";
        PreparedStatement pStmt=null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            valColCnt=0;
            ifFirst=true;
            for(int i=0;i<colNames.length;i++){
                String colName = colNames[i];
                if(this.getColValue(colName)!=null || nullAL.contains(colName)){
                    valColCnt++;
                    if(!nullAL.contains(colName)){
                        pStmt.setObject(valColCnt,getColValue(colName));
                    }else{// user set it null
                        int colIdx = getColIdx(colName);
                        pStmt.setNull(valColCnt,getColSqlType(colIdx));
                    }
                }
            }
            pStmt.execute();
        }finally{
            try{pStmt.close();}catch(Exception e){}
        }
        this.isDirty=false;
        return true;
    }
    public boolean deleteFromDB(Connection conn) throws SQLException {
        
        String sqlStr="DELETE FROM conf WHERE ";
        PreparedStatement pStmt=conn.prepareStatement(sqlStr);
        pStmt.execute();
        pStmt.close();
        this.isDirty=false;
        return true;
    }
    
    public boolean deleteAllFromDB(Connection conn) throws SQLException{
        String sqlStr="DELETE FROM conf";
        PreparedStatement pStmt=conn.prepareStatement(sqlStr);
        pStmt.execute();
        pStmt.close();
        this.isDirty=false;
        return true;
    }
    // update method
    public boolean updateDB(Connection conn) throws SQLException {
        return updateDB(conn ,"download_dir","encpass","opencloseencript","downloadname","delaftercopyinusb","delinthisday","action_whin_motion_stop","start_action_after_delay","open_every","time_not_open","date_for_action","ifidaid","action_for_action");
    }
    public boolean updateDB(Connection conn,String... colStrs) throws SQLException {
        
        String sqlStr = getUpdateSQL(colStrs);
        String[] updColNames=getUpdColNames(colStrs);
        PreparedStatement pStmt=null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            for(int i=0;i<updColNames.length;i++){
                Object obj = getColValue(updColNames[i]);
                if(obj!=null) pStmt.setObject(i+1,obj);
                else pStmt.setNull(i+1, getColSqlType(getColIdx(updColNames[i])));
            }
            pStmt.execute();
        }finally{
            try{pStmt.close();}catch(Exception ex){}
        }
        this.isDirty=false;
        return true;
    }
    public String getUpdateSQL(String... colStrs){
        String[] updColNames=getUpdColNames(colStrs);
        String sqlStr="UPDATE conf SET ";
        for(int i=0;i<updColNames.length;i++){
            if(i!=0) sqlStr+=", ";
            sqlStr+=updColNames[i]+"=?";
        }
        sqlStr+=" WHERE ";
        return sqlStr;
    }
    private String[] getUpdColNames(String... colStrs){
        ArrayList tmpAL=new ArrayList();
        for (String colStr : colStrs) {
            if (colStr == null) continue;
            colStr=colStr.trim();
            if("".equals(colStr)) continue;
            if(this.getColValue(colStr)==null && !this.nullAL.contains(colStr)) continue;
            tmpAL.add(colStr);
        }
        String[] ans=new String[tmpAL.size()];
        tmpAL.toArray(ans);
        return ans;
    }
    // SQL MODIFICATION METHODS END ----------------------------------------
    // </editor-fold>//GEN-END:INSERT_DELETE_UPDATE_METHOD
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:OTHER_ISSUES_METHOD
    public boolean isDirty(){
        return isDirty;
    }
    public void clearDirtyFlag(){
        this.isDirty=false;
    }
    public Object getUsrObj(){
        return usrObj;
    }
    public void setUsrObj(Object usrObj){
        this.usrObj = usrObj;
    }
    // </editor-fold>//GEN-END:OTHER_ISSUES_METHOD
}
